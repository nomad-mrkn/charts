additionalAnnotations: {}
additionalLabels: {}
affinity: {}
asciiArt: true
certificates:
  autoGenerated: false
  certManager:
    caSecretName: kedaorg-ca
    enabled: true
    generateCA: true
    secretTemplate: {}
  mountPath: /certs
  secretName: kedaorg-certs
clusterDomain: cluster.local
crds:
  install: true
env: []
extraArgs:
  keda: {}
  metricsAdapter: {}
extraObjects: []
grpcTLSCertsSecret: ""
hashiCorpVaultTLS: ""
http:
  keepAlive:
    enabled: true
  minTlsVersion: TLS12
  timeout: 3000
image:
  keda:
    repository: ghcr.io/kedacore/keda
    tag: ""
  metricsApiServer:
    repository: ghcr.io/kedacore/keda-metrics-apiserver
    tag: ""
  pullPolicy: Always
  webhooks:
    repository: ghcr.io/kedacore/keda-admission-webhooks
    tag: ""
imagePullSecrets: []
logging:
  metricServer:
    level: 0
  operator:
    format: json
    level: info
    timeEncoding: rfc3339
  webhooks:
    format: json
    level: info
    timeEncoding: rfc3339
metricsServer:
  affinity: {}
  dnsPolicy: ClusterFirst
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 3
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  revisionHistoryLimit: 10
  useHostNetwork: false
nodeSelector: {}
opentelemetry:
  collector:
    uri: ""
  operator:
    enabled: false
operator:
  affinity: {}
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 25
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  name: keda-operator
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 20
    periodSeconds: 3
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  revisionHistoryLimit: 10
permissions:
  metricServer:
    restrict:
      secret: false
  operator:
    restrict:
      secret: false
podAnnotations:
  keda: {}
  metricsAdapter: {}
  webhooks: {}
podDisruptionBudget:
  metricServer: {}
  operator: {}
  webhooks: {}
podIdentity:
  activeDirectory:
    identity: ""
  aws:
    irsa:
      audience: sts.amazonaws.com
      enabled: false
      roleArn: ""
      stsRegionalEndpoints: "true"
      tokenExpiration: 86400
  azureWorkload:
    clientId: ""
    enabled: false
    tenantId: ""
    tokenExpiration: 3600
  gcp:
    enabled: false
    gcpIAMServiceAccount: ""
podLabels:
  keda: {}
  metricsAdapter: {}
  webhooks: {}
podSecurityContext:
  metricServer:
    runAsNonRoot: true
  operator:
    runAsNonRoot: true
  webhooks:
    runAsNonRoot: true
priorityClassName: ""
prometheus:
  metricServer:
    enabled: false
    podMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
    port: 8080
    portName: metrics
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
      jobLabel: ""
      podTargetLabels: []
      port: metrics
      relabelings: []
      relabellings: []
      scrapeTimeout: ""
      targetLabels: []
      targetPort: ""
  operator:
    enabled: false
    podMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
    port: 8080
    prometheusRules:
      additionalLabels: {}
      alerts: []
      enabled: false
      namespace: ""
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
      jobLabel: ""
      podTargetLabels: []
      port: metrics
      relabelings: []
      relabellings: []
      scrapeTimeout: ""
      targetLabels: []
      targetPort: ""
  webhooks:
    enabled: false
    port: 8080
    prometheusRules:
      additionalLabels: {}
      alerts: []
      enabled: false
      namespace: ""
    serviceMonitor:
      additionalLabels: {}
      enabled: false
      interval: ""
      jobLabel: ""
      podTargetLabels: []
      port: metrics
      relabelings: []
      relabellings: []
      scrapeTimeout: ""
      targetLabels: []
      targetPort: ""
rbac:
  aggregateToDefaultRoles: false
  create: true
resources:
  metricServer:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 100Mi
  operator:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 100Mi
  webhooks:
    limits:
      cpu: 50m
      memory: 100Mi
    requests:
      cpu: 10m
      memory: 10Mi
securityContext:
  metricServer:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  operator:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  webhooks:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
service:
  annotations: {}
  portHttps: 443
  portHttpsTarget: 6443
  type: ClusterIP
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: true
  name: keda-operator
tolerations: []
topologySpreadConstraints:
  metricsServer: []
  operator: []
  webhooks: []
upgradeStrategy:
  metricsApiServer: {}
  operator: {}
  webhooks: {}
volumes:
  keda:
    extraVolumeMounts: []
    extraVolumes: []
  metricsApiServer:
    extraVolumeMounts: []
    extraVolumes: []
  webhooks:
    extraVolumeMounts: []
    extraVolumes: []
watchNamespace: ""
webhooks:
  affinity: {}
  enabled: false
  failurePolicy: Ignore
  healthProbePort: 8081
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 25
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  name: keda-admission-webhooks
  port: ""
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 20
    periodSeconds: 3
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  revisionHistoryLimit: 10
  useHostNetwork: false
